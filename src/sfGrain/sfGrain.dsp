declare version "2.78.5";
declare compile_options "-single -scal -e sfGrain_old.dsp -o sfGrain.dsp";
declare library_path0 "/usr/local/share/faust/stdfaust.lib";
declare library_path1 "/Users/letz/Developpements/smartfaust/src/sfGrain/grain_out_v0.6.dsp";
declare library_path2 "/Users/letz/Developpements/smartfaust/src/sfGrain/grain_v0.1.lib";
declare library_path3 "/Users/letz/Developpements/smartfaust/src/sfGrain/grain_pitch_shifter2_v0.2.dsp";
declare library_path4 "/usr/local/share/faust/filters.lib";
declare library_path5 "/usr/local/share/faust/maths.lib";
declare library_path6 "/usr/local/share/faust/platform.lib";
declare library_path7 "/usr/local/share/faust/signals.lib";
declare library_path8 "/usr/local/share/faust/delays.lib";
declare author "Christophe Lebreton, Stéphane Letz";
declare copyright "SmartFaust - GRAME(c)2013-2025";
declare delays_lib_name "Faust Delay Library";
declare delays_lib_version "1.1.0";
declare filename "sfGrain_old.dsp";
declare filters_lib_lowpass0_highpass1 "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_lowpass0_highpass1_author "Julius O. Smith III";
declare filters_lib_lowpass_author "Julius O. Smith III";
declare filters_lib_lowpass_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_lowpass_license "MIT-style STK-4.3 license";
declare filters_lib_name "Faust Filters Library";
declare filters_lib_tf1_author "Julius O. Smith III";
declare filters_lib_tf1_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf1_license "MIT-style STK-4.3 license";
declare filters_lib_tf1s_author "Julius O. Smith III";
declare filters_lib_tf1s_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf1s_license "MIT-style STK-4.3 license";
declare filters_lib_version "1.6.0";
declare grain_out_v0_6_dsp_author "Christophe Lebreton";
declare grain_out_v0_6_dsp_copyright "SmartFaust - GRAME(c)2013-2025";
declare grain_out_v0_6_dsp_license "BSD";
declare grain_out_v0_6_dsp_name "sfGrain_out";
declare grain_out_v0_6_dsp_version "1.02";
declare grain_pitch_shifter2_v0_2_dsp_author "Christophe Lebreton";
declare grain_pitch_shifter2_v0_2_dsp_copyright "SmartFaust - GRAME(c)2013-2025";
declare grain_pitch_shifter2_v0_2_dsp_license "BSD";
declare grain_pitch_shifter2_v0_2_dsp_name "sfPitchShifter";
declare grain_pitch_shifter2_v0_2_dsp_version "1.02";
declare grain_v0_1_lib_author "Christophe Lebreton, Stéphane Letz";
declare grain_v0_1_lib_copyright "SmartFaust - GRAME(c)2013-2025";
declare grain_v0_1_lib_license "BSD";
declare grain_v0_1_lib_name "sfGrain";
declare grain_v0_1_lib_version "1.04";
declare license "BSD";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.8.1";
declare name "sfGrain";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "1.3.0";
declare signals_lib_name "Faust Signal Routing Library";
declare signals_lib_version "1.6.0";
declare soundfiles "https://raw.githubusercontent.com/grame-cncm/smartfaust/master/src/sfGrain";
declare version "1.04";
ID_0 = 0, 0;
ID_1 = soundfile("sounds [url:{'sampleA.flac'; 'sampleB.flac'; 'sampleC.flac'; 'sampleD.flac'; 'sampleE.flac'; 'sampleF.flac'; 'sampleG.flac'; 'sampleH.flac'}]", 1);
ID_2 = !, !;
ID_3 = _, ID_2;
ID_4 = ID_1 : ID_3;
ID_5 = (ID_0 : ID_4);
ID_6 = hslider("v:sfGrain parameter(s)/gran_size[acc:1 1 -10 0 10][color:255 255 0][hidden:1]", 1.0f, 0.0001f, 1.0f, 0.0001f);
ID_7 = hslider("v:sfGrain parameter(s)/gransmooth [acc:1 1 -10 0 10][color:0 255 255][hidden:1]", 5e+01f, 0.1f, 5e+01f, 0.01f);
ID_8 = fconstant(int fSamplingFreq, <math.h>);
ID_9 = 1.0f, ID_8;
ID_10 = (ID_9 : max);
ID_11 = 1.92e+05f, ID_10;
ID_12 = (ID_11 : min);
ID_13 = 3.1415927f, ID_12;
ID_14 = ID_13 : /;
ID_15 = (ID_14 : tan);
ID_16 = 1, ID_15;
ID_17 = (ID_16 : /);
ID_18 = 0, ID_17;
ID_19 = (ID_18 : *);
ID_20 = 1, ID_19;
ID_21 = (ID_20 : +);
ID_22 = 1, ID_17;
ID_23 = (ID_22 : +);
ID_24 = ID_21, ID_23;
ID_25 = (ID_24 : /);
ID_26 = _, ID_25;
ID_27 = (ID_26 : *);
ID_28 = (ID_20 : -);
ID_29 = ID_28, ID_23;
ID_30 = (ID_29 : /);
ID_31 = _, ID_30;
ID_32 = ID_31 : *;
ID_33 = (mem : ID_32);
ID_34 = ID_27, ID_33;
ID_35 = (ID_22 : -);
ID_36 = ID_35, ID_23;
ID_37 = (ID_36 : /);
ID_38 = 0, ID_37;
ID_39 = (ID_38 : -);
ID_40 = _, ID_39;
ID_41 = (ID_40 : *);
ID_42 = + ~ ID_41;
ID_43 = ID_34 :> ID_42;
ID_44 = _ <: ID_43;
ID_45 = (ID_7 : ID_44);
ID_46 = 6.2831855f, ID_45;
ID_47 = (ID_46 : *);
ID_48 = ID_47, 0.5f;
ID_49 = (ID_48 : *);
ID_50 = ID_49, ID_12;
ID_51 = ID_50 : /;
ID_52 = (ID_51 : tan);
ID_53 = 1, ID_52;
ID_54 = (ID_53 : /);
ID_55 = 0, ID_54;
ID_56 = (ID_55 : *);
ID_57 = 1, ID_56;
ID_58 = (ID_57 : +);
ID_59 = 1, ID_54;
ID_60 = (ID_59 : +);
ID_61 = ID_58, ID_60;
ID_62 = (ID_61 : /);
ID_63 = _, ID_62;
ID_64 = (ID_63 : *);
ID_65 = (ID_57 : -);
ID_66 = ID_65, ID_60;
ID_67 = (ID_66 : /);
ID_68 = _, ID_67;
ID_69 = ID_68 : *;
ID_70 = (mem : ID_69);
ID_71 = ID_64, ID_70;
ID_72 = (ID_59 : -);
ID_73 = ID_72, ID_60;
ID_74 = (ID_73 : /);
ID_75 = 0, ID_74;
ID_76 = (ID_75 : -);
ID_77 = _, ID_76;
ID_78 = (ID_77 : *);
ID_79 = + ~ ID_78;
ID_80 = ID_71 :> ID_79;
ID_81 = _ <: ID_80;
ID_82 = 1, _;
ID_83 = ID_82 : min;
ID_84 = 0.0001f, _;
ID_85 = ID_84 : max;
ID_86 = ID_83 : ID_85;
ID_87 = ID_81 : ID_86;
ID_88 = (ID_6 : ID_87);
ID_89 = ID_5, ID_88;
ID_90 = ID_89 : *;
ID_91 = (ID_90 : int);
ID_92 = 1, ID_91;
ID_93 = (ID_92 : max);
ID_94 = _, ID_93;
ID_95 = (ID_94 : fmod);
ID_96 = _, 1;
ID_97 = (ID_96 : +);
ID_98 = ID_95 ~ ID_97;
ID_99 = _, 0.001f;
ID_100 = ID_99 : -;
ID_101 = (ID_90 : ID_100);
ID_102 = _, ID_101;
ID_103 = (ID_102 : -);
ID_104 = ID_103, 0.001f;
ID_105 = ID_104 : /;
ID_106 = 0, _;
ID_107 = ID_106 : max;
ID_108 = ID_107 : ID_83;
ID_109 = (ID_105 : ID_108);
ID_110 = 1, ID_109;
ID_111 = (ID_110 : -);
ID_112 = \(x3).(0,x3 : soundfile("sounds [url:{'sampleA.flac'; 'sampleB.flac'; 'sampleC.flac'; 'sampleD.flac'; 'sampleE.flac'; 'sampleF.flac'; 'sampleG.flac'; 'sampleH.flac'}]", 1) : !,!,_), ID_111;
ID_113 = ID_112 : *;
ID_114 = (ID_98 <: ID_113);
ID_115 = 1, 0;
ID_116 = (ID_115 : ID_4);
ID_117 = ID_116, ID_88;
ID_118 = ID_117 : *;
ID_119 = (ID_118 : int);
ID_120 = 1, ID_119;
ID_121 = (ID_120 : max);
ID_122 = _, ID_121;
ID_123 = (ID_122 : fmod);
ID_124 = ID_123 ~ ID_97;
ID_125 = (ID_118 : ID_100);
ID_126 = _, ID_125;
ID_127 = (ID_126 : -);
ID_128 = ID_127, 0.001f;
ID_129 = ID_128 : /;
ID_130 = (ID_129 : ID_108);
ID_131 = 1, ID_130;
ID_132 = (ID_131 : -);
ID_133 = \(x4).(1,x4 : soundfile("sounds [url:{'sampleA.flac'; 'sampleB.flac'; 'sampleC.flac'; 'sampleD.flac'; 'sampleE.flac'; 'sampleF.flac'; 'sampleG.flac'; 'sampleH.flac'}]", 1) : !,!,_), ID_132;
ID_134 = ID_133 : *;
ID_135 = (ID_124 <: ID_134);
ID_136 = 2, 0;
ID_137 = (ID_136 : ID_4);
ID_138 = ID_137, ID_88;
ID_139 = ID_138 : *;
ID_140 = (ID_139 : int);
ID_141 = 1, ID_140;
ID_142 = (ID_141 : max);
ID_143 = _, ID_142;
ID_144 = (ID_143 : fmod);
ID_145 = ID_144 ~ ID_97;
ID_146 = (ID_139 : ID_100);
ID_147 = _, ID_146;
ID_148 = (ID_147 : -);
ID_149 = ID_148, 0.001f;
ID_150 = ID_149 : /;
ID_151 = (ID_150 : ID_108);
ID_152 = 1, ID_151;
ID_153 = (ID_152 : -);
ID_154 = \(x5).(2,x5 : soundfile("sounds [url:{'sampleA.flac'; 'sampleB.flac'; 'sampleC.flac'; 'sampleD.flac'; 'sampleE.flac'; 'sampleF.flac'; 'sampleG.flac'; 'sampleH.flac'}]", 1) : !,!,_), ID_153;
ID_155 = ID_154 : *;
ID_156 = (ID_145 <: ID_155);
ID_157 = 3, 0;
ID_158 = (ID_157 : ID_4);
ID_159 = ID_158, ID_88;
ID_160 = ID_159 : *;
ID_161 = (ID_160 : int);
ID_162 = 1, ID_161;
ID_163 = (ID_162 : max);
ID_164 = _, ID_163;
ID_165 = (ID_164 : fmod);
ID_166 = ID_165 ~ ID_97;
ID_167 = (ID_160 : ID_100);
ID_168 = _, ID_167;
ID_169 = (ID_168 : -);
ID_170 = ID_169, 0.001f;
ID_171 = ID_170 : /;
ID_172 = (ID_171 : ID_108);
ID_173 = 1, ID_172;
ID_174 = (ID_173 : -);
ID_175 = \(x6).(3,x6 : soundfile("sounds [url:{'sampleA.flac'; 'sampleB.flac'; 'sampleC.flac'; 'sampleD.flac'; 'sampleE.flac'; 'sampleF.flac'; 'sampleG.flac'; 'sampleH.flac'}]", 1) : !,!,_), ID_174;
ID_176 = ID_175 : *;
ID_177 = (ID_166 <: ID_176);
ID_178 = 4, 0;
ID_179 = (ID_178 : ID_4);
ID_180 = ID_179, ID_88;
ID_181 = ID_180 : *;
ID_182 = (ID_181 : int);
ID_183 = 1, ID_182;
ID_184 = (ID_183 : max);
ID_185 = _, ID_184;
ID_186 = (ID_185 : fmod);
ID_187 = ID_186 ~ ID_97;
ID_188 = (ID_181 : ID_100);
ID_189 = _, ID_188;
ID_190 = (ID_189 : -);
ID_191 = ID_190, 0.001f;
ID_192 = ID_191 : /;
ID_193 = (ID_192 : ID_108);
ID_194 = 1, ID_193;
ID_195 = (ID_194 : -);
ID_196 = \(x7).(4,x7 : soundfile("sounds [url:{'sampleA.flac'; 'sampleB.flac'; 'sampleC.flac'; 'sampleD.flac'; 'sampleE.flac'; 'sampleF.flac'; 'sampleG.flac'; 'sampleH.flac'}]", 1) : !,!,_), ID_195;
ID_197 = ID_196 : *;
ID_198 = (ID_187 <: ID_197);
ID_199 = 5, 0;
ID_200 = (ID_199 : ID_4);
ID_201 = ID_200, ID_88;
ID_202 = ID_201 : *;
ID_203 = (ID_202 : int);
ID_204 = 1, ID_203;
ID_205 = (ID_204 : max);
ID_206 = _, ID_205;
ID_207 = (ID_206 : fmod);
ID_208 = ID_207 ~ ID_97;
ID_209 = (ID_202 : ID_100);
ID_210 = _, ID_209;
ID_211 = (ID_210 : -);
ID_212 = ID_211, 0.001f;
ID_213 = ID_212 : /;
ID_214 = (ID_213 : ID_108);
ID_215 = 1, ID_214;
ID_216 = (ID_215 : -);
ID_217 = \(x8).(5,x8 : soundfile("sounds [url:{'sampleA.flac'; 'sampleB.flac'; 'sampleC.flac'; 'sampleD.flac'; 'sampleE.flac'; 'sampleF.flac'; 'sampleG.flac'; 'sampleH.flac'}]", 1) : !,!,_), ID_216;
ID_218 = ID_217 : *;
ID_219 = (ID_208 <: ID_218);
ID_220 = 6, 0;
ID_221 = (ID_220 : ID_4);
ID_222 = ID_221, ID_88;
ID_223 = ID_222 : *;
ID_224 = (ID_223 : int);
ID_225 = 1, ID_224;
ID_226 = (ID_225 : max);
ID_227 = _, ID_226;
ID_228 = (ID_227 : fmod);
ID_229 = ID_228 ~ ID_97;
ID_230 = (ID_223 : ID_100);
ID_231 = _, ID_230;
ID_232 = (ID_231 : -);
ID_233 = ID_232, 0.001f;
ID_234 = ID_233 : /;
ID_235 = (ID_234 : ID_108);
ID_236 = 1, ID_235;
ID_237 = (ID_236 : -);
ID_238 = \(x9).(6,x9 : soundfile("sounds [url:{'sampleA.flac'; 'sampleB.flac'; 'sampleC.flac'; 'sampleD.flac'; 'sampleE.flac'; 'sampleF.flac'; 'sampleG.flac'; 'sampleH.flac'}]", 1) : !,!,_), ID_237;
ID_239 = ID_238 : *;
ID_240 = (ID_229 <: ID_239);
ID_241 = ID_219, ID_240;
ID_242 = ID_198, ID_241;
ID_243 = ID_177, ID_242;
ID_244 = ID_156, ID_243;
ID_245 = ID_135, ID_244;
ID_246 = ID_114, ID_245;
ID_247 = nentry("v:sfGrain/Select Sample[style:menu{'1':1;'2':2;'3':3;'4':4;'5':5;'6':6;'7':7}]", 1.0f, 1.0f, 7.0f, 1.0f);
ID_248 = ID_247 : int;
ID_249 = ID_96 : -;
ID_250 = ID_248 : ID_249;
ID_251 = (ID_250 : int);
ID_252 = 0, ID_251;
ID_253 = (ID_252 : ==);
ID_254 = _, ID_253;
ID_255 = (ID_254 : *);
ID_256 = 1, ID_251;
ID_257 = (ID_256 : ==);
ID_258 = _, ID_257;
ID_259 = (ID_258 : *);
ID_260 = 2, ID_251;
ID_261 = (ID_260 : ==);
ID_262 = _, ID_261;
ID_263 = (ID_262 : *);
ID_264 = 3, ID_251;
ID_265 = (ID_264 : ==);
ID_266 = _, ID_265;
ID_267 = (ID_266 : *);
ID_268 = 4, ID_251;
ID_269 = (ID_268 : ==);
ID_270 = _, ID_269;
ID_271 = (ID_270 : *);
ID_272 = 5, ID_251;
ID_273 = (ID_272 : ==);
ID_274 = _, ID_273;
ID_275 = (ID_274 : *);
ID_276 = 6, ID_251;
ID_277 = (ID_276 : ==);
ID_278 = _, ID_277;
ID_279 = (ID_278 : *);
ID_280 = ID_275, ID_279;
ID_281 = ID_271, ID_280;
ID_282 = ID_267, ID_281;
ID_283 = ID_263, ID_282;
ID_284 = ID_259, ID_283;
ID_285 = ID_255, ID_284;
ID_286 = ID_285 :> _;
ID_287 = ID_246 : ID_286;
ID_288 = vgroup("select your sample 1 to 7", ID_287);
ID_289 = -0.99f, _;
ID_290 = ID_289 : max;
ID_291 = 0.99f, _;
ID_292 = ID_291 : min;
ID_293 = hslider("grain_volume [acc:1 0 -10 0 10][color:0 255 0][hidden:1]", 1.0f, -0.1f, 1.0f, 0.001f);
ID_294 = ID_83 : ID_44;
ID_295 = ID_107 : ID_294;
ID_296 = (ID_293 : ID_295);
ID_297 = _, ID_296;
ID_298 = ID_297 : *;
ID_299 = checkbox("v:sfGrain/[1]ON/OFF");
ID_300 = (ID_299 : \(x1).(\(x2).((0.002f,x1 : *),(0.998f,x2 : *) : +)~_));
ID_301 = _, ID_300;
ID_302 = ID_301 : *;
ID_303 = ID_298 : ID_302;
ID_304 = ID_292 : ID_303;
ID_305 = ID_290 : ID_304;
ID_306 = \(x10).(((((x10,(65537,(0,(1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_ : int) : max) : min) : @),(1,((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),(1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_ : floor) : -) : -) : *),((x10,(65537,(0,((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_ : int),1 : +) : max) : min) : @),((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),(1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_ : floor) : -) : *) : +),(((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),(((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *),0.5f : *) : /),1 : min) : *),((((x10,(65537,(0,((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : int) : max) : min) : @),(1,(((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : +),((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : floor) : -) : -) : *),((x10,(65537,(0,(((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : int),1 : +) : max) : min) : @),(((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : +),((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : floor) : -) : *) : +),(1,(((1,(2,((hslider("v:sfGrain parameter(s)/shift [units (cents)] [acc:0 0 -10 0 10][color: 255 0 0 ][hidden:1] ", 0.0f, -6e+02f, 2e+02f, 0.1f),0.01f : * : _<:(_,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(3.1415927f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)),12 : /) : pow) : - : (+ : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : + : _,((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *) : fmod)~_),(((75,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),0.001f : *),0.5f : *) : /),1 : min) : -) : *) : +) : ID_305;
ID_307 = ID_288 : ID_306;
process = ID_307;
